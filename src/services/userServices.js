// services/userServices.js
import User from '../models/User.js';
import EmailService from './emailService.js';
import PaymentService from './paymentService.js';

class UserService {
  static async createUserFromTilda(tildaData) {
    try {
      console.log('üìù Creating user from Tilda data...');
      const paymentId = PaymentService.generatePaymentId();
      
      const formData = tildaData.data || tildaData;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.Email && !formData.Phone) {
        throw new Error('Email or Phone is required');
      }
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
      const userData = {
        fullname: formData.FullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        phone: this.normalizePhone(formData.Phone || ''),
        email: formData.Email || '',
        login: formData.Email || `user_${Date.now()}`,
        password: this.generatePassword(),
        age: parseInt(formData.Age) || null,
        yeardate: formData.Yeardate || null,
        conditions: formData.Conditions === 'yes' ? 'accepted' : 'pending',
        checkbox: formData.Checkbox === 'yes',
        documents: 'pending',
        payment_status: 'pending', 
        slot_number: null,
        // payment_id: paymentId,
        purchased_numbers: null,
        payment_id: paymentId,   
        membership_status: 'pending_payment', 
        tilda_transaction_id: tildaData.tranid || null,
        tilda_form_id: tildaData.formid || null,
        tilda_project_id: tildaData.formid ? tildaData.formid.replace('form', '') : '14245141',
        tilda_page_id: null
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await User.findByEmail(userData.email) || 
                          await User.findByPhone(userData.phone);

      // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let user;

if (existingUser) {
  console.log('üîÑ User exists, updating...');
  const userId = User.getUserId(existingUser);
  
  if (userId) {
    const updateData = {
      fullname: userData.fullname,
      phone: userData.phone,
      age: userData.age,
      email: userData.email,
      yeardate: userData.yeardate,
      payment_id: userData.payment_id
    };
    
    user = await User.update(userId, updateData);
    console.log('‚úÖ User updated successfully');
  } else {
    console.log('‚ö†Ô∏è Cannot determine user ID, creating new user');
    user = await User.create(userData);
    console.log('‚úÖ New user created instead');
  }
} else {
  console.log('üÜï User does not exist, creating new...');
  user = await User.create(userData);
  console.log('‚úÖ New user created successfully');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
await this.checkAndProcessPayment(user, userData);
return user;

    } catch (error) {
      console.error('‚ùå Error creating user from Tilda:', error);
      throw error;
    }
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  static async checkAndProcessPayment(user, userData) {
    try {
      console.log(`üí≥ Starting payment check for user ${user.email}`);
      
      // –ü–æ–ª—É—á–∞–µ–º payment_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const paymentId = userData.payment_id;
      
      if (!paymentId) {
        console.log('‚ö†Ô∏è No payment ID found, skipping payment check');
        return;
      }

      console.log(`üîç Checking payment status for ID: ${paymentId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      const paymentResult = await PaymentService.checkPaymentStatus(paymentId);
      
      console.log('üìä Payment result:', {
        success: paymentResult.success,
        status: paymentResult.status,
        message: paymentResult.message
      });

      // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
      if (paymentResult.success && paymentResult.status === 'succeeded') {
        console.log('üí∞ Payment successful! Updating user status...');
        
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const userId = User.getUserId(user);
        if (!userId) {
          console.error('‚ùå Cannot determine user ID for update');
          return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedUser = await User.update(userId, {
          payment_status: 'succeeded',
          membership_status: 'active'
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞
        await EmailService.sendWelcomeEmail(
          updatedUser, 
          userData.email, 
          userData.password,
          {
            paymentId: paymentId,
            paymentStatus: 'success',
            paymentMessage: paymentResult.message
          }
        );

        console.log('‚úÖ Payment processed successfully and email sent');
        
      } else if (paymentResult.status === 'pending') {
        console.log('‚è≥ Payment pending, will check later');
      } else {
        console.log('‚ùå Payment failed or not completed');
      }

    } catch (paymentError) {
      console.error('‚ùå Error in payment processing:', paymentError);
    }
}

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  static normalizePhone(phone) {
    if (!phone) return '';
    const digits = phone.replace(/\D/g, '');
    
    if (digits.startsWith('8') && digits.length === 11) {
      return '7' + digits.slice(1);
    }
    if (digits.startsWith('7') && digits.length === 11) {
      return digits;
    }
    if (digits.length === 10) {
      return '7' + digits;
    }
    
    return digits;
  }

  static generatePassword(length = 12) {
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    return Array.from({length}, () => 
      charset.charAt(Math.floor(Math.random() * charset.length))
    ).join('');
  }

  static async registerWithPayment(userData) {
    try {
      console.log('üéØ Registering user with immediate payment stub');
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await this.createUserFromTilda(userData);
      
      // Immediately process payment (stub)
      const paymentResult = await PaymentService.processPayment({
        user_id: newUser.user_id,
        amount: 1000,
        description: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å –≤ –∫–ª—É–±"
      });

      console.log('‚úÖ Registration with payment completed successfully');
      
      return {
        user: newUser,
        payment: paymentResult
      };
      
    } catch (error) {
      console.error('‚ùå Registration with payment error:', error);
      throw error;
    }
  }
  
  static async authenticate(login, password) {
    try {
      console.log('üîê Starting authentication for:', login);
      
      if (!login || !password) {
        throw new Error('Login or password is empty');
      }
  
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîç Searching user by login/email:', login);
      const user = await User.findByEmail(login) || await User.findByLogin(login);
      
      if (!user) {
        console.log('‚ùå User not found in database');
        return { 
          success: false, 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        };
      }
  
      console.log('‚úÖ User found:', { 
        id: user.user_id, 
        email: user.email,
        hasPassword: !!user.password 
      });
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      if (user.password !== password) {
        console.log('‚ùå Password mismatch');
        return { 
          success: false, 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
        };
      }
  
      console.log('‚úÖ Authentication successful');
      return { 
        success: true, 
        user: user,
        message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
      };
      
    } catch (error) {
      console.error('‚ùå AUTHENTICATION SERVICE ERROR:', error);
      console.error('‚ùå Error stack:', error.stack);
      throw error;
    }
  }
}

export default UserService;