// controllers/paymentController.js
import UserService from '../services/userServices.js';
import PaymentService from '../services/paymentService.js';

class PaymentController {
  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã - –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ
   */
  static async confirmPayment(req, res) {
    try {
      const { user_id, amount = 1000, description = "–í–∑–Ω–æ—Å –≤ –∫–ª—É–±" } = req.body;
      
      console.log('üí≥ PAYMENT STUB: Confirm payment request received');
      console.log('User ID:', user_id);
      console.log('Amount:', amount);
      console.log('Description:', description);

      if (!user_id) {
        return res.status(400).json({
          success: false,
          error: 'User ID is required'
        });
      }

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –∑–∞–≥–ª—É—à–∫—É
      const paymentResult = await PaymentService.processPayment({
        user_id,
        amount,
        description
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
      const user = await UserService.confirmPayment(user_id);
      
      res.json({
        success: true,
        message: '‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email.',
        payment: paymentResult,
        user: {
          id: user.user_id,
          email: user.email,
          fullname: user.fullname,
          status: user.membership_status,
          payment_status: user.payment_status
        },
        note: '‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.'
      });
      
    } catch (error) {
      console.error('‚ùå Payment confirmation error:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
   */
  static async testPayment(req, res) {
    try {
      console.log('üß™ TEST PAYMENT: Quick test endpoint');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
      const testUser = {
        user_id: 1,
        email: 'test@example.com',
        fullname: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      };

      const paymentResult = await PaymentService.processPayment({
        user_id: testUser.user_id,
        amount: 1000,
        description: "–¢–µ—Å—Ç–æ–≤—ã–π –≤–∑–Ω–æ—Å –≤ –∫–ª—É–±"
      });

      res.json({
        success: true,
        message: 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        payment: paymentResult,
        user: testUser,
        instructions: '–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ endpoint /confirm —Å —Ä–µ–∞–ª—å–Ω—ã–º userId'
      });
      
    } catch (error) {
      console.error('‚ùå Test payment error:', error);
      res.status(500).json({ success: false, error: error.message });
    }
  }

  /**
   * Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
   */
  static async checkStatus(req, res) {
    try {
      const { payment_id } = req.body;
      
      if (!payment_id) {
        return res.status(400).json({
          success: false,
          error: 'Payment ID is required'
        });
      }

      const status = await PaymentService.checkPaymentStatus(payment_id);
      
      res.json({
        success: true,
        status: status
      });
      
    } catch (error) {
      console.error('‚ùå Check status error:', error);
      res.status(500).json({ success: false, error: error.message });
    }
  }
}

export default PaymentController;